/*
plsql的命名规则
1. 变量名称的基本规则
长度限制: 变量名称的最大长度是 30 个字符。
开始字符: 变量名称必须以 字母 开头（可以是英文大写或小写字母）。
字符组成: 变量名称可以包含字母、数字、下划线（_），但不能包含其他符号（如 $、%、& 等），也不能包含空格。
区分大小写: PL/SQL 不区分大小写，即 my_var 和 MY_VAR 被视为相同的变量名称。
关键字: 变量名称不能与PL/SQL的保留字或关键字相同（如 SELECT、INSERT、DATE 等），否则会引起编译错误。
2. 变量命名的最佳实践
描述性: 使用有意义、描述性的名称，便于代码的可读性。例如，命名为 v_employee_name 比 v1 更具可读性。
使用前缀: 通常开发者会使用变量前缀来表示变量的类型或用途，例如：
v_ 用于一般变量，如 v_salary。
n_ 用于数值类型变量，如 n_total.
c_ 用于字符类型变量，如 c_name。
d_ 用于日期类型变量，如 d_hire_date。
*/

1.变量与数据类型
常用数据类型：
标量类型：如 NUMBER、VARCHAR2、DATE、BOOLEAN。
复合类型：如记录（RECORD）、集合（TABLE、VARRAY）。
引用类型：如游标变量。
大对象类型：如 BLOB、CLOB

1.1标量数据类型
1.1.1数值类型（NUMBER）
DECLARE
   -- 数值类型
   v_number NUMBER := 100;
   v_integer INTEGER := 10;
   v_float   BINARY_FLOAT := 12.34;

   -- 字符类型
   v_char CHAR(10) := 'A';
   v_varchar VARCHAR2(20) := 'Hello PL/SQL';

   -- 布尔类型
   v_boolean BOOLEAN := TRUE;

   -- 日期类型
   v_date    DATE := SYSDATE;

   -- 时间戳类型
   v_timestamp TIMESTAMP := SYSTIMESTAMP;

BEGIN
   -- 输出数值类型
   DBMS_OUTPUT.PUT_LINE('Number: ' || v_number);
   DBMS_OUTPUT.PUT_LINE('Integer: ' || v_integer);
   DBMS_OUTPUT.PUT_LINE('Float: ' || v_float);

   -- 输出字符类型
   DBMS_OUTPUT.PUT_LINE('Char: ' || v_char);
   DBMS_OUTPUT.PUT_LINE('Varchar: ' || v_varchar);

   -- 输出布尔类型
   IF v_boolean THEN
      DBMS_OUTPUT.PUT_LINE('Boolean: TRUE');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Boolean: FALSE');
   END IF;

   -- 输出日期和时间戳类型
   DBMS_OUTPUT.PUT_LINE('Date: ' || TO_CHAR(v_date, 'YYYY-MM-DD HH24:MI:SS'));
   DBMS_OUTPUT.PUT_LINE('Timestamp: ' || TO_CHAR(v_timestamp, 'YYYY-MM-DD HH24:MI:SS.FF'));

END;
）

1.2复合数据类型
1.2.1记录类型（RECORD）
DECLARE
  TYPE employee_rec IS RECORD (
    employee_id NUMBER,
    first_name VARCHAR2(50),
    last_name  VARCHAR2(50)
  );
  v_employee employee_rec;
BEGIN
  -- 使用记录
END;

1.2.2集合类型（TABLE, VARRAY, ASSOCIATIVE ARRAY）
TABLE（嵌套表）：类似于SQL中的表，可以动态扩展。
-- 定义嵌套表
TYPE number_table IS TABLE OF NUMBER;
v_numbers number_table := number_table();


VARRAY（变长数组）：具有固定大小的数组。
-- 定义VARRAY
TYPE varchar_varray IS VARRAY(10) OF VARCHAR2(50);
v_names varchar_varray := varchar_varray();


ASSOCIATIVE ARRAY（关联数组）：键值对集合，键可以是整数或字符串。
-- 定义关联数组
TYPE assoc_array IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
v_assoc assoc_array;

1.2.3游标：看另一篇关于游标的详细讲解
1.2.4大对象类型：如 BLOB、CLOB
1.2.5变量命名规则
字母和数字：变量名必须以字母开头，可以包含字母、数字和下划线（_）。
长度限制：最长可达30个字符。
不区分大小写：V_NAME和v_name被视为相同。
保留字：不能使用PL/SQL的保留字作为变量名（如BEGIN、END、SELECT等）。
命名风格：
有意义的名称：变量名应反映其用途，如v_salary表示存储薪资。
前缀：常用前缀如v_（变量）、c_（常量）、p_（参数）等

2.运算符与表达式
算术运算符：+、-、*、/、**（乘方）
比较运算符：=、!=、<>、>、<、>=、<=
逻辑运算符：AND、OR、NOT
字符串运算符：||（连接符）


3.数据类型转换
3.1显式转换
TO_CHAR：将数值或日期转换为字符串
v_str := TO_CHAR(v_number);
v_date_str := TO_CHAR(v_date, 'YYYY-MM-DD');

TO_NUMBER：将字符串转换为数值。
v_number := TO_NUMBER(v_str);

TO_DATE：将字符串转换为日期。
v_date := TO_DATE('2024-01-01', 'YYYY-MM-DD');

3.2隐式转换
DECLARE
  v_number NUMBER := 100;
  v_str    VARCHAR2(10);
BEGIN
  v_str := v_number; -- 隐式转换，将NUMBER转换为VARCHAR2
  DBMS_OUTPUT.PUT_LINE('String Value: ' || v_str);
END;

4.示例代码
4.1：基本变量声明与使用
DECLARE
  v_employee_id NUMBER := 101;
  v_first_name  VARCHAR2(50) := '张';
  v_last_name   VARCHAR2(50) := '三';
  v_salary      NUMBER;
  v_is_active   BOOLEAN := TRUE;
BEGIN
  -- 赋值操作
  v_salary := 5000;

  -- 使用变量
  DBMS_OUTPUT.PUT_LINE('员工ID: ' || v_employee_id);
  DBMS_OUTPUT.PUT_LINE('姓名: ' || v_first_name || ' ' || v_last_name);
  DBMS_OUTPUT.PUT_LINE('薪资: ' || v_salary);
  
  IF v_is_active THEN
    DBMS_OUTPUT.PUT_LINE('员工状态: 活跃');
  ELSE
    DBMS_OUTPUT.PUT_LINE('员工状态: 非活跃');
  END IF;
END;


4.2：使用不同数据类型
DECLARE
  v_number      NUMBER := 12345.678;
  v_char        CHAR(10) := 'PL/SQL';
  v_varchar     VARCHAR2(20) := 'Oracle';
  v_date        DATE := SYSDATE;
  v_timestamp   TIMESTAMP := SYSTIMESTAMP;
  v_flag        BOOLEAN := FALSE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Number: ' || v_number);
  DBMS_OUTPUT.PUT_LINE('Char: ' || v_char);
  DBMS_OUTPUT.PUT_LINE('Varchar2: ' || v_varchar);
  DBMS_OUTPUT.PUT_LINE('Date: ' || TO_CHAR(v_date, 'YYYY-MM-DD'));
  DBMS_OUTPUT.PUT_LINE('Timestamp: ' || TO_CHAR(v_timestamp, 'YYYY-MM-DD HH24:MI:SS.FF'));
  
  IF v_flag THEN
    DBMS_OUTPUT.PUT_LINE('Flag is TRUE');
  ELSE
    DBMS_OUTPUT.PUT_LINE('Flag is FALSE');
  END IF;
END;
4.3：复合数据类型 - RECORD
DECLARE
  TYPE employee_rec IS RECORD (
    employee_id NUMBER,
    first_name  VARCHAR2(50),
    last_name   VARCHAR2(50),
    salary      NUMBER
  );
  
  v_employee employee_rec;
BEGIN
  -- 赋值
  v_employee.employee_id := 102;
  v_employee.first_name  := '李';
  v_employee.last_name   := '四';
  v_employee.salary      := 6000;
  
  -- 使用记录
  DBMS_OUTPUT.PUT_LINE('员工ID: ' || v_employee.employee_id);
  DBMS_OUTPUT.PUT_LINE('姓名: ' || v_employee.first_name || ' ' || v_employee.last_name);
  DBMS_OUTPUT.PUT_LINE('薪资: ' || v_employee.salary);
END;


4.4：集合类型 - VARRAY
DECLARE
  TYPE varchar_varray IS VARRAY(5) OF VARCHAR2(50);
  v_names varchar_varray := varchar_varray('张', '李', '王', '赵', '孙');
BEGIN
  FOR i IN 1..v_names.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE('姓名 ' || i || ': ' || v_names(i));
  END LOOP;
END;


