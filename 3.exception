1.异常的分类
1.1预定义异常的种类
NO_DATA_FOUND：当SELECT INTO语句未返回任何行时触发。
TOO_MANY_ROWS：当SELECT INTO语句返回多于一行时触发
ZERO_DIVIDE：当程序试图除以零时触发。
-------
VALUE_ERROR: 当发生值错误，如类型不匹配、溢出等时触发
DECLARE
  v_num NUMBER;
BEGIN
  v_num := 'ABC'; -- 类型不匹配
EXCEPTION
  WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('值错误：无法将字符串转换为数字。');
END;
-------
INVALID_NUMBER：当尝试将无效的字符串转换为数字时触发。
BEGIN
  SELECT TO_NUMBER('XYZ') INTO v_num FROM dual;
EXCEPTION
  WHEN INVALID_NUMBER THEN
    DBMS_OUTPUT.PUT_LINE('无效的数字格式。');
END;
--------
LOGIN_DENIED：当用户登录被拒绝时触发。
OTHERS：捕获所有未被其他WHEN子句捕获的异常。


1.2用户定义异常
1.2.1基本模式：
DECLARE
--创建一个异常
  e_custom_error EXCEPTION;
BEGIN
  -- 某个条件满足时抛出异常
  IF some_condition THEN
    RAISE e_custom_error;
  END IF;
EXCEPTION
  WHEN e_custom_error THEN
    DBMS_OUTPUT.PUT_LINE('自定义异常被捕获。');
END;
1.2.2抛出异常：可以通过两种方式抛出异常
1.2.2.1RAISE语句：抛出已声明的异常
DECLARE
  e_custom_error EXCEPTION;
BEGIN
  -- 某个条件满足时抛出异常
  IF some_condition THEN
    RAISE e_custom_error;
  END IF;
EXCEPTION
  WHEN e_custom_error THEN
    DBMS_OUTPUT.PUT_LINE('自定义异常被捕获。');
END;

1.2.2.2RAISE_APPLICATION_ERROR过程
RAISE_APPLICATION_ERROR过程允许开发者抛出带有自定义错误编号和错误消息的异常。它是内置过程，属于DBMS_STANDARD包。


--基本代码
RAISE_APPLICATION_ERROR(error_number, error_message [, {TRUE | FALSE}]);
--解释
error_number：必须在-20000到-20999之间。
error_message：自定义的错误消息。
**TRUE**或FALSE（可选）：指示是否传播堆栈跟踪信息。默认为FALSE。


--举例
BEGIN
  IF salary > 100000 THEN
    RAISE_APPLICATION_ERROR(-20001, '薪资超过了允许的上限。');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('错误代码：' || SQLCODE || ', 错误信息：' || SQLERRM);
END;


2.错误信息函数
2.1SQLCODE
BEGIN
  -- 可能引发异常的代码
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('错误代码：' || SQLCODE);
END;


2.2SQLERRM
BEGIN
  -- 可能引发异常的代码
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('错误信息：' || SQLERRM);
END;


3.示例代码
示例 1：基本的异常处理
BEGIN
  -- 可能引发异常的代码
  DBMS_OUTPUT.PUT_LINE('开始执行程序。');
  -- 强制触发一个除以零的异常
  DECLARE
    v_num NUMBER := 10;
    v_den NUMBER := 0;
    v_result NUMBER;
  BEGIN
    v_result := v_num / v_den;
  END;
  DBMS_OUTPUT.PUT_LINE('程序执行结束。');
EXCEPTION
  WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE('错误：尝试除以零。');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('发生了一个未知错误：' || SQLERRM);
END;


示例 2：处理预定义异常
DECLARE
  v_first_name employees.first_name%TYPE;
BEGIN
  -- 尝试查询不存在的员工
  SELECT first_name INTO v_first_name FROM employees WHERE employee_id = 9999;
  DBMS_OUTPUT.PUT_LINE('员工姓名：' || v_first_name);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('未找到对应的员工。');
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('查询返回了多于一行的数据。');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('发生了一个未知错误：' || SQLERRM);
END;


示例 3：用户定义异常
DECLARE
  e_salary_too_high EXCEPTION;
  v_salary NUMBER := 150000;
BEGIN
  IF v_salary > 100000 THEN
    RAISE e_salary_too_high;
  END IF;
  DBMS_OUTPUT.PUT_LINE('薪资在允许范围内。');
EXCEPTION
  WHEN e_salary_too_high THEN
    DBMS_OUTPUT.PUT_LINE('错误：薪资超过了允许的上限。');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('发生了一个未知错误：' || SQLERRM);
END;


示例 4：使用 RAISE_APPLICATION_ERROR
BEGIN
  DECLARE
    v_age NUMBER := 200;
  BEGIN
    IF v_age < 0 THEN
      RAISE_APPLICATION_ERROR(-20002, '年龄不能为负数。');
    ELSIF v_age > 150 THEN
      RAISE_APPLICATION_ERROR(-20003, '年龄超过了合理范围。');
    END IF;
  END;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('错误代码：' || SQLCODE || ', 错误信息：' || SQLERRM);
END;

