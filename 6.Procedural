1.基本语法
CREATE [OR REPLACE] PROCEDURE procedure_name
    [ (parameter1 [mode1] datatype1, parameter2 [mode2] datatype2, ...) ]
IS
    -- 声明部分
BEGIN
    -- 可执行部分
EXCEPTION
    -- 异常处理部分
END procedure_name;

procedure_name：存储过程的名称。
参数：存储过程可以有输入参数（IN），输出参数（OUT）或输入/输出参数（IN OUT）。
声明部分：用于声明变量、常量、游标等（可选）。
可执行部分：包含SQL语句和PL/SQL逻辑。
异常处理部分：处理运行过程中可能出现的异常（可选）。

----
2.示例：创建一个简单的存储过程
假设我们有一个employees表，包含employee_id、first_name和last_name等字段。我们将创建一个存储过程，根据员工ID查询员工的姓名
CREATE OR REPLACE PROCEDURE get_employee_name (
    p_employee_id IN employees.employee_id%TYPE,
    p_first_name OUT employees.first_name%TYPE,
    p_last_name OUT employees.last_name%TYPE
) AS
BEGIN
    SELECT first_name, last_name    
    INTO p_first_name, p_last_name
    FROM employees
    WHERE employee_id = p_employee_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_first_name := 'Not Found';
        p_last_name := 'Not Found';
    WHEN OTHERS THEN
        p_first_name := 'Error';
        p_last_name := 'Error';
END get_employee_name;
-------
3.调用存储过程
DECLARE
    v_first_name employees.first_name%TYPE;
    v_last_name employees.last_name%TYPE;
BEGIN
    get_employee_name(100, v_first_name, v_last_name);
    DBMS_OUTPUT.PUT_LINE('First Name: ' || v_first_name);
    DBMS_OUTPUT.PUT_LINE('Last Name: ' || v_last_name);
END;
/
----
4.复杂的存储过程
//复杂存储过程
/**
 * @procedure calculate_department_avg_salary
 * @description 计算每个部门的平均薪资，并将结果存储到 dept_avg_salary 汇总表中。
 *              如果汇总表中已存在该部门的记录，则更新其平均薪资；否则，插入新的记录。
 * @param 无
 * @return 无
 */
CREATE OR REPLACE PROCEDURE calculate_department_avg_salary AS
BEGIN
    FOR dept_rec IN (SELECT department_id, AVG(salary) AS avg_salary
                     FROM employees
                     GROUP BY department_id) LOOP
        BEGIN
            -- 尝试更新现有记录
            UPDATE dept_avg_salary
            SET avg_salary = dept_rec.avg_salary
            WHERE department_id = dept_rec.department_id;
            
            IF SQL%ROWCOUNT = 0 THEN
                -- 如果没有行被更新，插入新记录
                INSERT INTO dept_avg_salary (department_id, avg_salary)
                VALUES (dept_rec.department_id, dept_rec.avg_salary);
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                -- 记录异常日志（假设有 error_log 表）
                INSERT INTO error_log (error_message, error_time)
                VALUES (SQLERRM, SYSDATE);
                RAISE;
        END;
    END LOOP;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END calculate_department_avg_salary;
----调用示例
BEGIN
    calculate_department_avg_salary;
    DBMS_OUTPUT.PUT_LINE('部门平均薪资计算并更新成功。');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('发生错误：' || SQLERRM);
END;
/
